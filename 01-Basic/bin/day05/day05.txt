回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所改变的那个量
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               要素1与要素3相同时，首选
  3)for:应用率最高，固定次数循环




MultiTable

正课:
1.三种循环结构的更佳适用情况:
  1)while: "当..."循环
  2)do...while: "直到..."循环
                第1要素与第3要素相同时首选
  3)for: 固定次数循环
2.嵌套循环:
  1)循环中套循环，多行多列时使用，外层控制行，内层控制列
  2)执行规则: 外层循环走一次，内层循环走所有次
  3)建议:嵌套层数越少越好，能用一层就不用两层，能用两层就不用三层
         必须用三层以上才能解决，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  1)算法:解决问题的步骤/流程/方法(顺序、分支、循环)
    数据结构:将数据按照某种特定的结构来保存
	         数怎么存
  2)设计良好的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)数组是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[4];
  4)数组的初始化:
      int[] arr = new int[4]; //0,0,0,0
	  int[] arr = {1,3,5,7};  //1,3,5,7
	  int[] arr = new int[]{1,3,5,7}; //1,3,5,7
	  int[] arr;
      arr = {1,3,5,7}; //编译错误，此方式必须声明同时初始化
	  arr = new int[]{1,3,5,7}; //正确
  5)数组的访问:
    5.1)通过数组名.length来获取数组的长度
	      int[] arr = new int[3];
		  System.out.println(arr.length); //3
	5.2)通过下标/索引来访问数组中的元素
	    下标从0开始，最大到(数组名.length-1)
		  int[] arr = new int[3];
          arr[0] = 100;
		  arr[1] = 200;
		  arr[2] = 300;
		  arr[3] = 400; //数组下标越界异常
		  System.out.println(arr[0]); //输出第1个元素的值
		  System.out.println(arr[arr.length-1]); //输出最后一个元素的值
  6)数组的遍历:
      int[] arr = new int[10];
      for(int i=0;i<arr.length;i++){
	    arr[i] = 100;
	  }
	  for(int i=0;i<arr.length;i++){
	    System.out.println(arr[i]);
	  }
	  for(int i=arr.length-1;i>=0;i--){
	    System.out.println(arr[i]);
	  }
  7)数组的复制:
    7.1)System.arraycopy(a,1,a1,0,4);---效率高、灵活
	7.2)int[] a1 = Arrays.copyOf(a,6);
	    a = Arrays.copyOf(a,a.length+1); //扩容
  8)数组的排序:
    8.1)Array.sort(arr); //升序排列，首选
	8.2)冒泡工作原理:
        8.2.1)四个数冒三轮
        8.2.2)每一轮都是从第1个元素开始冒
              每一次都是和它的下一个元素比
        8.2.3)冒出来了就不带它玩了



练习一:
  接收10个评委的打分并存储在scores数组中
  对该数组进行冒泡排序
  输出最高分和最低分
  计算平均分并放在最后一个元素的下一个位置
练习二:
  4个经典案例重做一次







int[] scores = new int[10];

for(int i=0;i<scores.length;i++){
  System.out.println("请第"+(i+1)+"个评委打分");
  scores[i] = scan.nextInt();
}















    arr.length-1-i
i=0 比3次
i=1 比2次
i=2 比1次

int[] arr = {34,26,58,2};  //升序
for(int i=0;i<arr.length-1;i++){ //控制轮
  for(int j=0;j<arr.length-1-i;j++){ //控制次
    if(arr[j]>arr[j+1]){ //和它下一个元素比
	  int t=arr[j];
	  arr[j]=arr[j+1];
	  arr[j+1]=t;
	}
  }
}

第一轮:
  34和26比，换，26,34,58,2
  34和58比，不换
  58和2比，换，26,34,2,58--------58冒出来了
第二轮:
  26和34比，不换
  34和2比，换，26,2,34,58--------34冒出来了
第三轮:
  26和2比，换，2,26,34,58--------26冒出来了










30万条数据---------插入排序最快
30万条数据---------冒泡排序最快
30万条数据---------快速排序最快


Arrays.sort(arr); //升序排列


long a = System.currentTimeMills();
快速排序
long b = System.currentTimeMills();

System.out.println(b-a);








int[] a = {1,4,5,6,7,8};
int[] b = new int[5];

for(int i=0;i<b.length;i++){
  b[i] = a[i];
}

b[0]=a[0];
b[1]=a[1];
b[2]=a[2];
b[3]=a[3];
b[4]=a[4];







int[] arr = {1,5,45,23};
找最大值的算法:
1.假设第一个元素为最大的
    int max = arr[0];
2.遍历剩余元素，用剩余元素与max做对比
  若剩余元素大于max，则修改max的值为较大的
    for(int i=1;i<arr.length;i++){
	  if(arr[i]>max){
	    max=arr[i];
	  }
	}
max=1/5/45











ArrayDemo





int[] arr = new int[30];
for(int i=0;i<arr.length;i++){
  arr[i] = 100;
}
for(int i=0;i<arr.length;i++){
  System.out.println(arr[i]);
}
for(int i=arr.length-1;i>=0;i--){
  System.out.println(arr[i]);
}


System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);
System.out.println(arr[3]);
...
System.out.println(arr[29]);







arr[0] = 100;
arr[1] = 100;
arr[2] = 100;
arr[3] = 100;
......
arr[29] = 100;















int[] arr = new int[3];
arr[0] = 5;
arr[1] = 100;
arr[2] = 250;
arr[3] = 800; //数组下标越界异常









int[] arr = new int[3]; //0,0,0
arr[0]----代表arr中的第1个元素----int类型


int a=0;
int b=0;
int c=0;
b=100; //给第2个数赋值为100






//声明布尔型数组b，包含26个元素
//每个元素都是boolean型，默认值为false
boolean[] b = new boolean[26]; //













//声明double型数组d，包含10个元素
//每个元素都是double型，默认值为0.0
double[] d = new double[10];












//声明整型数组a，包含4个元素
//每个元素都是int型，默认值为0
int[] a = new int[4]; //0,0,0,0












int   a = 5; //声明整型变量a
int[] a = 5; //声明整型数组变量a












按图书类别存储-----------java编程思想
按出版社存储-------------java编程思想











一下子跳出所有层循环-----这样的需求几乎没有


6000000
for(int i=1;i<=100;i++){
  for(int j=1;j<=200;j++){
    for(int k=1;k<=300;k++){
	  if(...){
	    break;
	  }
      System.out.println("aaa");
	}
  }
}

i=1
  j=1
    k=1/2/.../29/30
  j=2
    k=1/2/.../29/30
  
  /2/3/4/.../19/20
i=2
  j=1/2/3/4/.../19/20
...
i=10
  j=1/2/3/4/.../19/20






1*9=9   2*9=18  3*9=27  












int count;
for(count=0;count<10;count++){
}
System.out.println(count); //10


int count = 0;
while(count<10){
  count++;
}
System.out.println(count); //10










int times=0;
while(times<10){
  times--;
}
0/-1/-2/-3/-4/-5/-6



0/1/2/3/4/5/6/7/8/9

