回顾:
1.运算符:
  1)算术:+-*/%,++,--
  2)关系:>,<,>=,<=,==,!= boolean
  3)逻辑:&&(并且),||(或者),!(取反) boolean
  4)赋值:=,+=,-=,*=,/=,%=
  5)字符串连接:+
  6)三目/条件:boolean?数1:数2
2.分支结构:有条件的执行某语句，并非每句必走
  1)if:1条路
  2)if...else:2条路
  3)if...else if:多条路
  4)switch...case:多条路
    优点:结构清晰、效率高
	缺点:整数、相等
	break:跳出switch






笔记:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所改变的那个量
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行再判断，至少执行一次
               第1要素与第3要素相同时，首选
  3)for:应用率最高，固定次数循环
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环

练习一:
实现猜数字小游戏，要求：使用while、do…while实现
   程序内置一个 1 到 1000 之间的数字作为猜测的结果，由用户猜测此数字。
   用户每猜测一次，由系统提示猜测结果：大了、小了或者猜对了；
   直到用户猜对结果，则提示游戏结束。
   在游戏过程中，如果用户录入数字0，则游戏终止。
练习二:
实现随机加法运算器，要求如下:
   程序依次出 10 道加法题目，由用户输入题目的答案。
   用户每答完一道题，由系统提示结果：答错了或者答对了。
   10 道题目答完之后，系统计算得分并输出。
   如果用户希望提前结束，则可以输入-1提前退出。



















Addition


int score = 0;
for(int i=1;i<=10;i++){ //10次
  出题、答题、判题
}
System.out.println("总得分为:"+score);




随机生成0到99的数

Math.random()--------------0.0到0.9999999....
*100-----------------------0.0到99.999999....
(int)----------------------0到99


反复10次:
  出题+答题+判题

(1).56+2=?
算吧!
58
答对了

(2).12+98=?
算吧!
45
答错了

(3).5+99=?
算吧!
104
答对了

.......
总得分为60
























int times=0;  //1
while(times<10){  //2
  System.out.println("行动是成功的阶梯");  //4
  times++;  //3
}
System.out.println("over");

12432432432432432432
12432432432432432432





//   1               2         3
for(int times=0 ; times<10 ; times++){
  System.out.println("行动是成功的阶梯"); //4
}
System.out.println("over");

12432432432432432432432






1到1000之内的




Math.random()------------0.0到0.999999999...
(int)--------------------0到0
*1000--------------------
+1-----------------------






Math.random()------------0.0到0.999999999...
*1000--------------------0.0到999.9999999...
(int)--------------------0到999
+1-----------------------1到1000






Math.random()------------0.0到0.999999999...
*1000--------------------0.0到999.9999999...
+1-----------------------1.0到1000.999999...
(int)--------------------1到1000









int a = 6;
int a = scan.nextInt();




int num = 250; //藏起来那个数

GuessingGame

循环变量: 用户猜的那个数guess
1)System.out.println("猜吧!");
  int guess = scan.nextInt();  
2)guess!=num
3)System.out.println("猜吧!");
  guess = scan.nextInt();       


猜吧!
300
太大了

猜吧!
200
太小了

猜吧!
251
太大了

猜吧!
250
恭喜你，猜对了










WhileDemo，包含main，把注释删掉



循环变量:圈数count
1)int count=0;
2)count<3
3)count++;

                     圈数为0
够3圈吗? 不够 跑一圈 圈数为1
够3圈吗? 不够 跑一圈 圈数为2
够3圈吗? 不够 跑一圈 圈数为3
够3圈吗? 够了


打印机打印10份简历:

循环变量:份数times
1)int times=0;
2)times<10
3)times++;

                        份数为0
够10份吗? 不够 打印一份 份数为1
够10份吗? 不够 打印一份 份数为2
够10份吗? 不够 打印一份 份数为3
够10份吗? 不够 打印一份 份数为4
够10份吗? 不够 打印一份 份数为5
够10份吗? 不够 打印一份 份数为6
够10份吗? 不够 打印一份 份数为7
够10份吗? 不够 打印一份 份数为8
够10份吗? 不够 打印一份 份数为9
够10份吗? 不够 打印一份 份数为10
够10份吗? 够了






循环变量: 次数times
1)int times=0;
2)times<10
3)times++;


案例1: 输出10次"行动是成功的阶梯"
          行动是成功的阶梯
		  行动是成功的阶梯
		  行动是成功的阶梯
		  行动是成功的阶梯
		  行动是成功的阶梯
		  行动是成功的阶梯
		  行动是成功的阶梯
		  行动是成功的阶梯
		  行动是成功的阶梯
		  行动是成功的阶梯

循环变量:乘数num
1)int num=1;
2)num<=9
3)num++;


案例2: 输出9的乘法表
          1*9=9
		  2*9=18
		  3*9=27
		  4*9=36
		  5*9=45
		  6*9=54
		  7*9=63
		  8*9=72
		  9*9=81

循环变量: 乘数num
1)int num=9;
2)num>=1
3)num--;





System.out.println("行动是成功的阶梯");








1)顺序结构:从上往下逐行执行，每句必走
2)分支结构:有条件的执行某语句一次，并非每句必走
3)循环结构:有条件的执行某语句多次，并非每句必走


while(boolean){
  循环体----反复干的那个事
}
System.out.println("over");










if(boolean){
  语句块
}
System.out.println("over");










switch(month)

1/3/5/7/8/10/12------------31天
4/6/9/11-------------------30天
2--------------------------28天/29天








int a=8,b=5,c=6,d=2;  //升序a=5,b=6,c=8
若a>b则换，保证a<b
若a>c则换，保证a<c
若a>d则换，保证a<d
若b>c则换，保证b<c
若b>d则换，保证b<d
若c>d则换，保证c<d









if(a>b){ 
  int t=a; //t=8
  a=b;     //a=5
  b=t;     //b=8
}













System.out.println("请输入两个数");
int a = scan.nextInt();
int b = scan.nextInt();

5
6

5 6

5        6





a++
a--
!a
一个运算符的优先级比较高










