1.Spring事务
JDBC:（复习jdbc中的事务操作）
con.setAutoCommit(false);
statement.executeUpdate();

数据库中：
con.commit();/con.rollback();

比如转账：
try{
 con.setAutoCommit(false);
 statement.executeUpdate(sql1);
 statement.executeUpdate(sql2);
 //其他处理逻辑
 con.commit();
}catch(){
 con.rollback();
}

1.事务简介：
事务是和数据库操作有关系概念，可以提交和撤销前面执行的sql操作，针对增删改有效

使用目的：为了保障业务处理及db数据的完整性

2.Spring提供了对事务管理支持
---支持数据库访问技术API
---支持事务管理

Spring采用AOP机制来完成事务控制，可以实现在不修改原有组件代码的情况下实现事务控制功能
比如采用以上的try catch，则需要对原有代码进行try catch，即修改了代码。Spring采用AOP机制可以不修改原组件代码


Spring提供了两种事务管理方式：
a、编程式事务管理（编写java）
TransactionTemplate:可以查看spring中文手册，中间层数据访问-》编程式事务管理-》查看源码，但是这种方法也修改了源码。(比如其中的两个操作，就需要放在它的封装好的方法体中)
b、声明式事务管理（编写配置）推荐使用方式
XML版本配置
注解版本配置：
配置DataSourceTransactionManager、开启事务注解配置、在目标组件方法前添加事务注解标记



为什么在配置时要添加dataSource这个属性，因为，事务管理它要回滚，你得告诉它是连接哪个数据库，因此需要指定连接池。
在mybatis中添加：
<!-- 配置Spring JDBC 中的数据源事务管理 -->
<bean id="txManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource"
        ref="dataSource"/>
</bean>
<!-- 声明: 可以使用注解式事务处理了
开启事务注解标记@Transactional,当调用@Transactional标记的方法时，将txManager事务管理功能切入进入 -->
<tx:annotation-driven   
    transaction-manager="txManager"/>

然后，在比如UserServiceImpl的regist方法前添加@Transactional标记，比如要对一个类中的所有的方法进行事务管理，则在类的前面追加注解@Transactional标记

接下来介绍基于XML版本配置。
	<!-- 配置Spring JDBC 中的数据源事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"
			ref="dataSource"/>
	</bean>
	<!-- 这一段可以参考spring中文手册，可以找到对应的配置，transaction-manager="txManager"
	表示使用事务回滚，下面再具体配置那些方法需要使用事务管理，add*表示以add开头的方法-->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:attributes>
				<tx:method name="regist"/>
				<tx:method name="load"/>
				<tx:method name="add*"/>
				<tx:method name="*"/>
			</tx:attributes>
		</tx:attributes>
	</tx:advice>
	<aop:config>
	<!-- 下面的这个aop:pointcut配置用于衔接以上方法相关配置，表示org.tarena.note.service包下的所有service
	中的regist方法、load方法等。这里的..代表org.tarena.note.service包及其子包下，*代表多个，通过
	expression表示org.tarena.note.service包及其子包下的service组件上的以上方法进行事务管理，这样就可以知道从service
	中的比如regist方法要怎么办，add开头的方法要怎么办等。-->
	<aop:pointcut id="target" 
		expression="within(org.tarena.note.service..*)"/>
		<aop:advisor advice-ref="txAdvice" 
		pointcut-ref="target"/>
	</aop:config>
这两种方法掌握一种就是，以前没有注解，只有基于XML配置，这里对XML配置进行了解。具体可以去参考spring中文手册，有详细解释。

	
3、Spring对事务管理的控制(a、b、c、d四点)
a、控制事务可读可写特性
Spring分为可读写事务和只读事务，默认为可读写，一般只涉及查询操作，建议用只读事务@Transactional(readOnly=true)，比如登录时UserServiceImpl中的
checkToken方法，只涉及到查询，因此可以添加
    @Transactional(readOnly=true)
	public boolean checkToken(String userId, String token) {
b、控制事务是否回滚
Spring遇到RuntimeException异常，会事务回滚，比如空指针、类型转换异常、数字转换异常、数组下标越界等。遇到非运行时异常、不会事务回滚。比如FileNotFoundException，非
运行时异常，不会事务回滚。但是，如果我就是想遇到这种异常让其事务回滚，则可以这样 @Transactional(readOnly=true，rollbackFor=IOException.class)，遇到IOException也会发生回滚。这个就是手动操作回滚操作。

建议：public class MyException extends Exception{ 这样区分不出来是否是RuntimeException，因此不会回滚。
而如果是写成了public class MyException extends RuntimeException{，则采用默认机制，自动回滚事务。

c、控制事务传播类型
遇到带有事务控制方法调用一个事务控制方法时，可以选择合适的传播类型，默认是REQUIRED类型，后者使用前者事务。


a.f1-->调用b.f2，而f1和f2都有事务控制，那么到底是采取哪个呢？
REQUIRED  //如果想要f1和f2都采取同一个事务，即如果f2操作失败，则f2前面的代码返回，也就是f2它得听f1原来的事务回滚。此时用REQUIRED
public void f1(){
//一部分逻辑处理
b.f2();
}
而如果不绑定在一起，比如f2出错了，就回滚f2的就好，也就是f2独立出来，则又是采用另一种传播机制,即REQUIRED_NEW，表示不采用f1的事务机制，而是将其原来的机制挂起来，然后使用自己的事务机制
REQUIRED_NEW
public void f1(){
//一部分逻辑处理
b.f2();
}

--------------------------------------------------------------------------
Spring中常用事务类型：（作为一个了解）
REQUIRED--支持当前事务，如果当前没有事务，就新建一个事务，这就是最常见的选择。
SUPPORTS:--支持当前事务，如果没有当前事务,就以非事务方式执行
MANADATORY：--支持当前事务事务，如果没有当前事务,就抛出异常
REQUIRED_NEW：--新建事务，如果当前存在事务，就把当前事务挂起，这也是常用的。
NOT_SUPPORTED：--以非事务方式执行操作，如果当前存在事务，就把当前事务挂起
NEVER：以非事务方式执行,，如果当前存在事务，则抛出异常
NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与REQUIRED类似的操作。
拥有多个可以回滚的保存点，内部回滚不会对外部事务产生影响。只对DataSourceTransactionManager
------------------------------------------------------------------------------------------


d、控制事务隔离级别：

理解什么是事务隔离级别：对同一条记录做操作，两个事务同时要进行，操作要并发了
比如
 @Transactional(readOnly=true，isolation=Isolation.READ_COMMITTED)

由低到高如下：
READ_UNCOMMITTED //读未提交
READ_COMMITTED //读已提交
REPEATABLE_READ //可重复读
SERILIZABLE //序列化
DEFAULT默认，根据数据库隔离级别自动选择。Oracle为READ_COMMITED


READ_UNCOMMITTED表示，假如我做添加操作，你做列表查看，我刚做完save处理，你这里查，可以查到我添加的记录，但是有可能我刚把save执行完，save后面的逻辑还没处理，这save和这些逻辑处理属于一个事务，事务还没结束，后面的逻辑出问题了，因此需要回滚，save操作中插入的数据也要回滚，这样导致你那儿查出来了，而我这里还没真正的提交，所以，容易出现看到许多这种幻觉上的数据。这些数据只是当时人家执行了添加，后面又回滚了。

READ_COMMITTED //读已提交
则必须是这个事务真正的提交了，不会存在幻觉现象。但也存在问题，比如下面，对第一次findById(1)后对其进行操作，第二次findById(1)查出来结果和第一次不一样。所以，对同一条记录做提取，多次重复读，读出来的状态不一样，因此为了保证多次读取一致，需要采用第三种事务隔离级别，可重复读。这样就可以在你读取的时候，锁住，不让其他人对这条记录进行更新删除。



@Transactional(readOnly=true，isolation=Isolation.REPEATABLE_READ)
findById(1)
//处理
//调用另一个组件-->findById(1)
//处理
使用REPEATABLE_READ表示，用来保证两次调动findById(1)查询出来的内容都是一样的，而不存在说第一次查询findById(1)后对其进行了修改，第二次再查询则返回结果不一致了。


SERILIZABLE //序列化
表示你做查询，别人做增删改查都不行，必须等你做完这个操作别人才可以操作。安全，但是并发处理级别是最低的。
而REPEATABLE_READ表示你查询，别人不可以增删改，但是还可以查询。


级别越高安全性越高，但是处理效率越低。
级别越低安全性越差，但是并发处理能力强
平时使用建议采用默认DEFAULT，遇到特殊问题再采用加锁机制处理


比如数据库默认是读已提交，那么出现
findById(1)
//处理
//调用另一个组件-->findById(1)
//处理
这个情况，怎么办？

单独对findById(1)进行加锁
findById(1)
//处理
加锁{
//调用另一个组件-->findById(1)
}
//处理


线程并发：
public void f1(){
cccc
synchronized(obj){
dddd}
eeee
}


select * from cn_note where cn_note_id = 1 for update ，这条记录表示必须等我查询结束了，你才能执行增删改查


4.Spring AOP应用
AOP编程优点：可以动态将一个组件功能切入到指定的目标方法上。可以使程序结构更加灵活，也能实现组件的重复利用。

Aspect Oriented Programming
面向切面编程

OOP：面向对象编程，侧重点对象设计
AOP：面向切面编程，侧重点切面

AOP编程：更注重于业务逻辑隔离，将一些共同处理逻辑和传统处理逻辑解耦。比如事务管理、日志记录、异常处理等等。比如事务管理，传统的处理逻辑，我们需要对所有的代码进行事务管理，而采用AOP，即将重复的处理逻辑从传统的处理逻辑中抽离出来，单独用个组件再进行封装。再通过配置的方式动态的作用到原来的传统逻辑上。

适用环境：什么样的功能需要频繁调用，并且是同一时机被调用
--共通处理逻辑
--调动时机相同 (比如员工，都是工作前打卡，因此可以将打卡采用AOP处理，他们的时机都是一样的，再假如现在不用打卡了，是改成刷脸了，这样只要将打卡改成刷脸就好。）

处理逻辑，将其抽离，将这件事情单独拿出来做，因此，AOP是用来将一些共同处理逻辑和传统处理逻辑解耦。

现在执行一个操作，在云笔记中所有的controller调用方法时，输出"进入Controlelr”。如果不用AOP，则需要在每个controller的方法中添加输出语句。






==============AOP应用（需要考虑三点)（================================================================================
a、要切入什么功能--》切面组件（Aspect）
b、切入的时机 --》通知（Advice）（切入的时机的专称），一共有五种：环绕通知，前置通知，后置通知，异常通知，最终通知

环绕通知=前置+后置，有点像过滤器

try{
	前置通知@Before：先走切面功能，再走自己方法
	//目标方法处理
	后置通知@AfterReturning：先执行自己的方法，再去调用切面功能
}catch(){
	异常通知@AfterThrowing：执行组件抛异常了，再去调用切面
}finally{
	最终通知@After：调用方法不管有没有异常，最终都要走这个方法
}
c、往哪些组件方法切入--》切入点（Pointcut）
--类型限定表达式
  within(类型）
  与类型匹配的组件都是目标
  within（org.service.UserService)
  within（org.service.UserService.*) //org.service.UserService包下
  within（org.service.UserService..*) //org.service.UserService包及子包下

--方法限定表达式
  execution（修饰符 返回类型  方法名（参数） 抛出异常）
  public List findById(String s) throws Exception{
  }
注意：
修饰符(可有可无）
抛出异常(可有可无）
那如果我想匹配有返回值和无返回值的方法，则可采用 *
如果想表示参数是0-多个，则用(..)
因此，可以表示为execution(* find*(..))，这里表示返回类型任意，并且参数也任意，方法以find开头

execution(* find*(..)) 返回类型任意，并且参数也任意，方法以find开头
execution(* org.service.UserService.regist(..)) 指明了必须是org.service.UserService.regist方法，参数任意
execution(* org.service.UserService.*(..)) //表示org.service.UserService下的所有方法
execution(* org.service.*.*(..)) //表示在这个org.service包下这个*类的*方法，*代表所有
execution(* org.service..*.*(..))//表示在这个org.service包及其子包下所有类的所有方法

比如这样写：
execution(* org.service..*(..)) 就只能表示这个包及其子包下所有类，并没有到方法名这个级别去。所以，必须还得在类后面去.名。

还可以用运算符!,&&,||进行连接处理，如execution(（* org.service.UserService.regist(..)）&&（* org.service.UserService.login(..))
===============================================================================================================================







=================案例===========================================================================================================
云笔记：异常处理，当发生异常后，将异常信息记录到文件中。
为什么想记录异常信息？因为如果异常信息过多，很容易刷屏，很难找到，而这些异常对于开发者是比较重要的，因此，我们对异常信息进行记录。
如果之前没有aop，则肯定是要对controller写try catch，然后再编写记录，但是这样所有的controller都需要修改。因此，这里单独将其写成一个aop组件。

a、要切入什么功能：
	将异常信息写入文件
b、切入的时机
	出现异常调用，使用异常通知@AfterThrowing
c、往哪些组件方法切入
	往controller组件追加
	within(cn.tedu.note.controller..*)

去看思维导图，day09下午笔记。











