回顾:
1.方法:
    封装特定的逻辑功能、独立、只干一件事
	避免代码的重复、便于维护、团队协作
    修饰词 返回值类型 方法名(参数列表){
	  方法体
	}
    无返回值:
	   方法名(有参传参);
	有返回值:
	   数据类型 变量 = 方法名(有参传参);
	   方法名(有参传参); //不建议

2.猜字符小游戏:






笔记:
1.什么是类？什么是对象？
  1)现实生活是由很多很多对象组成的
    基于对象抽出了类
  2)对象:真实存在的单个个体
    类:类型/类别，代表一类个体
  3)类中可以包含:
    3.1)所有对象所共有的特征/属性-------变量
	3.2)所有对象所共有的行为------------方法
  4)一个类可以创建多个对象，
    同一类型的多个对象，结构相同，数据不同
  5)类是对象的模板，对象是类的具体的实例
2.如何创建类？如何创建对象？
3.引用类型之间画等号:指向了同一个对象
    1)对其中一个引用的修改影响另外一个引用
    2)eg: 房子钥匙
  基本类型之间画等号:赋值
    1)对其中一个变量的修改不会影响另外一个变量
    2)eg: 身份证复印件
4.null:空，没有指向任何对象
       若引用的值为null，则不能再进行任何操作了
       若操作则空指针异常NullPointerException







练习一:
1.定义Tetris项目中的Cell类，包含：
    属性：row行号、col列号
    方法：drop()，用于实现下落一格
          moveLeft()，用于实现左移n格
          getCellInfo()，用于实现获取格子行号和列号
  定义CellTest类，要求：
    添加打印方法printWall()进行墙及格的输出
    在main()方法中创建格子对象并调用printWall()测试
练习二:
1.定义图书Book类，包含如下：
  属性：书名，作者，价格，借阅状态(int型, 可借阅为1，已借阅为2，超期为3)
  方法：print()，用于输出图书信息(输出书名、作者、价格)
        borrow()，用于实现图书的借阅(若为可借阅状态则修改其为已借阅状态并返回true，否则返回false)
        sendBack()用于实现图书的归还(若为借阅和超期状态则修改为可借阅状态并返回true，否则返回false)








boolean borrow(){
  if(type==1){
    type=2;
	return true;
  }else{
    return false;
  }
}










RefTypeNullDemo



房子:     对象
房子钥匙: 引用
配了钥匙: 引用
















      引用
类型  引用类型变量  指向   对象
Cell  c              =      new Cell();
c.row = 2;
c.col = 4;







new Cell();
new Cell();
new Cell();
new Cell();

new Student();
new Student();
new Student();

new Student();




        引用
类型    引用类型变量  指向   对象
Student zs             =     new Student();

    变量
    基本类型变量
int a;









引用类型的默认值为null

oo.day01
Student
StudentTest

int[] arr = new int[4]; //0,0,0,0




1)找对象:一堆小格子
2)抽类:Cell
3)设计类中的数据(变量)和行为(方法)
4)创建对象并测试


class Cell{ //格子类
  int row; //行号
  int col; //列号
  void drop(){ //下落一格
    row++;
  }
  void moveLeft(int n){ //左移n格
    col-=n;
  }
  String getCellInfo(){ //获取行号和列号
    return row+","+col;
  }
}




Cell
CellTest





Student zs = new Student(); //创建一个学生对象
Student ls = new Student();
Student ww = new Student();
Student zl = new Student();


Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "河北廊坊";
zs.className = "JSD1607";
zs.eat();
zs.sleep();
zs.study();
zs.abc = 250; //编译错误


Student ls = new Student();
ls.name = "lisi";
ls.age = 26;
ls.address = "黑龙江佳木斯";
ls.className = "JSD1607";
ls.eat();
ls.sleep();
ls.study();



class Student{ //学生类
  String name;
  int age;
  String address;
  String className; 
  void eat(){}
  void sleep(){}
  void study(){}
}












class Teacher{ //老师类
  String name;
  int age;
  String address;
  double salary;
  void eat(){}
  void sleep(){}
  void teach(){}
}

class Cat{ //猫类
  String type;
  String color;
  void jump(){}
}
class Car{ //汽车类
  String type;
  String color;
  double price;
  void run(){}
  void stop(){}
  void back(){}
}











对象            类
WKJ             老师
DWN
GT


对象            类
张三            学生
李四
王五


对象            类
小花            猫
小白
小强


对象            类
马六            汽车
奥迪
奥拓











面向过程的缺陷:
1.缺乏对数据的封装
2.数据和方法的分离




class Emp{ //Emp就是自己造的类型的名字
  String name;
  int age;
  double salary;
  public void print(){
    System.out.println("姓名:"+name);
	System.out.println("年龄:"+age);
	System.out.println("工资:"+salary);
  }
}

class Test{ //测试类
  public static void main(String[] args){
    Emp e = new Emp(); //创建了一个雇员
	e.name = "zhangsan";
	e.age = 25;
	e.salary = 5000;
	e.print();
  }

}














基本类型-------只能装一个数据
数组-----------只能同一类型数据
自己创造类型---想装什么就装什么






前4天的经典案例-----俄罗斯方块项目

晕乎乎的:---------------正常的
不晕不正常:
1.什么也没听懂
2.自以为不晕-------很不错很不错很不错


自我放弃













语言基础:固定
1)猜字符游戏
2)去银行取钱

面向对象:抽象
1)射击游戏
2)向着社会主义社会发展






















循环结构----while和do...while

请输入等级(5、7、9):
4
请输入等级(5、7、9):
8
请输入等级(5、7、9):
3
请输入等级(5、7、9):
2
请输入等级(5、7、9):
5
ABCDE








public static int[] generateArray(int len,int max){
  int[] arr = new int[len];
  for(int i=0;i<arr.length;i++){
    arr[i] = (int)(Math.random()*max);
  }
  return arr;
}










面向对象------6天








