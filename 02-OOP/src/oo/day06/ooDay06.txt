回顾:
1.static final常量:
   不能改，类名.来访问，必须声明同时初始化，大写
   编译器在编译时会自动替换为具体的值
2.抽象方法:
   abstract，只有方法的定义，没有方法体
3.抽象类:
   abstract，包含抽象方法的类必须是抽象类
   不能被实例化，是需要被继承的，子类:
     要么声明为抽象类，要么重写所有抽象方法
   意义:
     封装子类共有的属性和行为，实现代码复用
     为所有子类提供一个统一的类型，向上造型
	 包含抽象方法，为所有子类提供统一的入口
4.接口:
   标准、规范，interface，常量和抽象方法
   不能被实例化，是需要被实现的，实现类:
     必须重写所有抽象方法
   一个类可以实现多个接口，
   若又继承又实现时，先继承后实现
   接口继承接口







笔记:
1.多态:
  1)多态的意义:
    1.1)同一类型的引用指向不同的对象时，有不同的实现
	    ----行为的多态: cut(), run()
	1.2)同一个对象被造型成不同的类型时，有不同的功能
	    ----对象的多态: 我，你，水
  2)向上造型:
    2.1)父类的引用指向子类的对象
	2.2)能造型成的类型包括:
	      父类+所实现的接口
	2.3)能点出来什么，看引用的类型
  3)强制类型转换，成功的有条件:
    3.1)引用所指向的对象，就是该类型
	3.2)引用所指向的对象，实现了该接口
  4)若不符合如上两个条件，则发生ClassCastException类型转换异常，
    强转之前建议通过instanceof判断引用指向的对象是否是该类型
2.成员内部类: 应用率比较低
  1)类中套类，外面的称为Outer外部类，里面的称为Inner内部类
  2)内部类通常只服务于外部类，对外不具备可见性
  3)内部类对象通常在外部类中创建
  4)内部类中可以直接访问外部类的成员(包括私有的)
    内部类隐式的引用指向了创建它的外部类对象
3.匿名内部类:较常用
  1)想创建一个类的对象，并且对象只创建一次，
    该类不必命名，称之为匿名内部类
	前提: 匿名内部类一定得是子类或实现类
  2)匿名内部类中想访问外部的变量，该变量必须是final的
4.面向对象三大特征:
  1)封装:
    1.1)类:封装的是对象的属性和行为
	1.2)方法:封装的是具体的逻辑功能
	1.3)访问控制修饰符:封装的访问的权限
  2)继承:
    2.1)代码的复用
	2.2)父类/基类:共有的属性和行为
	    子类/派生类:特有的属性和行为
    2.3)子类继承父类后，子类具有:父+子
	2.4)单一继承、传递性
  3)多态:
    3.1)意义: 行为的多态、对象的多态
	3.2)向上造型、强制类型转换、instanceof
	3.3)多态的表现形式: 重写、重载


面向对象课程内容安排:
第一天:
  1)什么是类？什么是对象？
  2)如何创建类？如何创建对象？如何访问成员
  3)引用类型之间画等号
  4)null和NullPointerException
第二天:
  1)方法的重载(overload)
  2)构造方法
  3)this
  4)引用类型数组
第三天:
  1)内存管理
  2)继承
  3)super
  4)向上造型
第四天:
  1)方法的重写(override)
    重写与重载的区别
  2)package和import
  3)访问控制修饰符
  4)static
  5)final
  6)static final常量
第五天:
  1)抽象方法
  2)抽象类
  3)接口
第六天:
  1)多态: 
      意义、向上造型、强制类型转换、instanceof
  2)内部类:
      成员内部类、匿名内部类



练习:
1.完成农行ATM类
2.运行ShootGame，了解需求



















System.out.println();
System.out.println(2);
System.out.println(4.5);
System.out.println('a');
System.out.println(true);
System.out.println("Hello");














内部类有独立的.class吗?-----常见面试题
-----------有


Mama$Baby
NstInnerClassDemo$1









NstInnerClassDemo











InnerClassDemo



Aoo o1 = new Aoo();
Boo o2 = new Boo(); //编译错误

class Aoo{
  private int num;
  void test(){
    Boo o = new Boo();
  }
  class Boo{
    void show(){
	  System.out.println(num);
	  System.out.println(Aoo.this.num);
	  System.out.println(this.num); //编译错误
	}
  }
}















农行ATM系统:
1)所有卡都能插
2)只有农行卡才能支付电话费




ABCATM atm = new ABCATM();
UnionPay card = new CCBImpl(); //银联卡-农行卡
atm.insertCard(card); //插卡
atm.payTelBill();

class ABCATM{ //农行ATM
  private UnionPay card; //银联卡
  public void insertCard(UnionPay card){ //插卡
    this.card = card;
  }
  public void payTelBill(){
    if(card instanceof ABC){
	  ABC abcCard = (ABC)card;
      abcCard.payTelBill("12345678945",500);
	}else{
	  System.out.println("不是农行卡，不能支付电话费");
	}
  }
}


ATM只提供一堆按钮(接口)----无参无返回值的
在方法中，调用card的功能







MultiTypeDemo









Aoo o1 = new Boo();
Boo o2 = (Boo)o1;       //符合了3.1
Inter1 o3 = (Inter1)o1; //符合了3.2
Coo o4 = (Coo)o1; //ClassCastException类型转换异常
if(o1 instanceof Coo){ //false
  Coo o5 = (Coo)o1;
}



System.out.println(o1 instanceof Boo);    //true
System.out.println(o1 instanceof Inter1); //true
System.out.println(o1 instanceof Coo);    //false


interface Inter1{
}
class Aoo{
}
class Boo extends Aoo implements Inter1{
}
class Coo extends Aoo{
}













父类大，子类小

类型转换:
1)自动类型转换:从小到大
2)强制类型转换:从大到小


人 p1 = new 理发师(); //向上造型--自动类型转
理发师 p2 = new 人(); //编译错误











我 me = new 我();
讲师       o1 = me;
孩子他妈   o2 = me;
老公的老婆 o3 = me;

o1.授课();
o2.揍他();
o3.咬他();
o3.收工资();

interface 讲师{
  void 授课();
}
interface 孩子他妈{
  void 揍他();
}
interface 老公的老婆{
  void 咬他();
  void 收工资();
}
class 我 implements 讲师,孩子他妈,老公的老婆{
  void 授课(){}
  void 揍他(){}
  void 咬他(){}
  void 收工资(){}
}




















Animal o1 = new Tiger();
Animal o2 = new Fish();
Animal o3 = new Bird();

o1.run();
o2.run();
o3.run();

abstract class Animal{
  abstract void run();
}
class Tiger extends Animal{
  void run(){ 在地上跑 }
}
class Fish extends Animal{
  void run(){ 在水里游 }
}
class Bird extends Animal{
  void run(){ 在天上飞 }
}















cut()就是多态的


人 p1 = new 理发师();
人 p2 = new 外科医生();
人 p3 = new 演员();

p1.cut(); //剪发
p2.cut(); //开刀
p3.cut(); //停止表演


abstract class 人{
  abstract void cut();
}
class 理发师 extends 人{
  void cut(){ 剪发 }
}
class 外科医生 extends 人{
  void cut(){ 开刀 }
}
class 演员 extends 人{
  void cut(){ 停止表演 }
}


















设计规则:
1)将所有子类公共的属性和行为，抽到父类中
2)所有子类行为都一样----普通方法
  所有子类行为不一样----抽象方法
3)符合既是也是的关系时，使用接口
  部分子类公共的属性和行为，抽到接口








需求:
  达内教学副总裁:
    培训员工()、解决问题()、编辑稿件()
  讲师:
    培训员工()、解决问题()、编辑稿件()
  达内项目经理:
    编辑稿件()


interface 企业技术顾问{
  void 培训员工();
  void 解决问题();
}
interface 技术图书作者{
  void 编辑稿件();
}
abstract class 达内职员{
  姓名、年龄、工资
  void 上班打卡(){ 按个手纹、拍个照 }
  void 下班打卡(){ 按个手纹、拍个照 }
  abstract void 完成工作();
}
class 教学副总裁 extends 达内职员 implements 企业技术顾问，技术图书作者{
}
class 讲师 extends 达内职员 implements 企业技术顾问，技术图书作者{
}
class 项目经理 extends 达内职员 implements 技术图书作者{
}
class 班主任 extends 达内职员{
}



抽象类本质上还是一个父类，
  只不过它包含了抽象方法

















接口中只有常量






interface CCB extends UnionPay{
  public void payFire(double money);
}
class CCBImpl implements CCB{
  重写UnionPay中的3个方法
  public void payFire(double money){
  }
}











abstract class Shape{
  protected double c;
  public Shape(double c){
    this.c = c;
  }
  public abstract double area();
}
class Six extends Shape{
  public Six(double c){
    this.c = c;
  }
  public double area(){
    return 0.0721*c*c;
  }
}









